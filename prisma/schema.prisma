// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bookmark {
  id          String   @id @default(uuid())
  url         String
  name        String
  isFavorite  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // OG Preview data
  ogTitle       String?
  ogDescription String?
  ogImage       String?
  favicon       String?
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId    String?
  folder      Folder?  @relation(fields: [folderId], references: [id])
  bookmarkTags BookmarkTag[]

  @@map("bookmark")
}

model Folder {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  bookmarks   Bookmark[]
  profileId   String?
  profile     Profile?  @relation(fields: [profileId], references: [id])
  parentId    String?
  parent      Folder?   @relation("FolderToFolder", fields: [parentId], references: [id])
  subfolders  Folder[]  @relation("FolderToFolder")
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("folder")
}

model Profile {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  folders     Folder[]
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Tag {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  bookmarkTags BookmarkTag[]
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([title, userId])
  @@map("tag")
}

model BookmarkTag {
  bookmarkId  String
  bookmark    Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  tagId       String
  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@id([bookmarkId, tagId])
  @@map("bookmark_tag")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Session       Session[]
  Account       Account[]
  
  bookmarks     Bookmark[]
  folders       Folder[]
  profiles      Profile[]
  tags          Tag[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  createdAt DateTime
  updatedAt DateTime

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  expiresAt             DateTime?
  password              String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}
